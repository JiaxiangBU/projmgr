% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/report.R
\name{report_discussion}
\alias{report_discussion}
\title{Print issue comments in RMarkdown friendly way}
\usage{
report_discussion(issue, comments)
}
\arguments{
\item{issue}{Dataframe or tibble of issues, as returned by \code{get_issues()}}

\item{comments}{Dataframe or tibble of comments for a single issue, as returned by \code{get_issue_comments()}}
}
\value{
Returns character string of HTML with class attribute to be correctly shown "as-is" in RMarkdown
}
\description{
Interprets dataframe or tibble of issues by breaking apart milestones and listing each
issue title as open or closed, and uses HTML to format results in a highly readable and
attractive way. Resulting object returned is a character vector of HTML code with the added
class of \code{'knit_asis'} so that when included in an RMarkdown document knitting to HTML,
the results will be correctly rendered as HTML.
}
\examples{
\dontrun{
In RMarkdown:
```{r}
issue <- get_issues(repo, number = 15) \%>\% parse_issues()
comments <- get_issue_comments(rep, number = 15) \%>\% parse_issue_comments()
report_discussion(issue, comments)
```
}
}
\seealso{
Other issues: \code{\link{get_issue_comments}},
  \code{\link{get_issue_events}}, \code{\link{get_issues}},
  \code{\link{parse_issue_comments}},
  \code{\link{parse_issue_events}},
  \code{\link{parse_issues}}, \code{\link{post_issue}},
  \code{\link{report_progress}},
  \code{\link{viz_waterfall_issues}}

Other comments: \code{\link{get_issue_comments}},
  \code{\link{parse_issue_comments}}
}
\concept{comments}
\concept{issues}
