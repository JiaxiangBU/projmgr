% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/viz-taskboard.R
\name{viz_taskboard_links}
\alias{viz_taskboard_links}
\title{Save SVG of Agile-style task board of issue status with links to issues}
\usage{
viz_taskboard_links(g, filepath)
}
\arguments{
\item{g}{ggplot2 object returned by \code{viz_gantt_closed()}}

\item{filepath}{Location to save resulting SVG file of ggplot2, if desired. Leave blank for
function to output message precisely as needed to render in HTML RMarkdown with chunk
option \code{results = 'asis'}}
}
\value{
SVG version of ggplot2 object with links to relevant GitHub issues. Either writes output
    to file or to console (to be captured in RMarkdown) depending on existence of \code{filepath} argument
}
\description{
This function creates the same plot as \code{viz_taskboard} then edits the
underlying XML so that the "cards" are linked to the corresponding issues on GitHub.
It saves a file with the reuslting SVG, which can then be read into an RMarkdown
HTML document as shown in the Examples.
}
\details{
Credit goes to this Stack Overflow answer for figuring out how to do this:
https://stackoverflow.com/questions/42259826/hyperlinking-text-in-a-ggplot2-visualization/42262407
}
\examples{
\dontrun{
# In R, to save to file:
viz_taskboard_links(issues, "my_folder/my_file.svg")

# In RMarkdown chunk, to print as output:
```{r results = 'asis', echo = FALSE}
g <- viz_taskboard(issues)
viz_taskboard_links(g)
````
}
}
\seealso{
Other issues: \code{\link{get_issue_events}},
  \code{\link{get_issues}},
  \code{\link{parse_issue_events}},
  \code{\link{parse_issues}}, \code{\link{post_issue}},
  \code{\link{report_progress}},
  \code{\link{viz_gantt_closed_links}},
  \code{\link{viz_gantt_closed}},
  \code{\link{viz_taskboard}},
  \code{\link{viz_waterfall_issues}}
}
\concept{issues}
